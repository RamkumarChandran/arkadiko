<?xml version="1.0"?>

<beans
	default-destroy-method="destroy"
	default-init-method="afterPropertiesSet"
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd"
>

	<!--
	 * com.liferay.arkadiko.bean.AKBeanPostProcessor:
	 *
	 * The key Arkadiko component is a BeanPostProcessor which provides a
	 * means of backing the spring context with the ability to publish and
	 * retrieve beans from an OSGi service registry. Only beans matching the
	 * exclusion and inclusion rules are handled by the BeanPostProcessor.
	 *
	 * There are two ways in which a bean can be associated with an OSGi service
	 * from the registry:
	 *
	 * 1) a regularly defined, matching bean is wrapped with a special proxy
	 * which registers the bean as a service and creates a service tracker which
	 * looks for new implementations of the service matching the generated
	 * filter when such is deployed into the OSGi framework.
	 *
	 * 2) a bean defined with only an interface as it's class attribute is
	 * provided by a proxy which registers a service tracker which looks for an
	 * implementation deployed into the OSGi framework. This case ignores the
	 * exclusion and inclusion rules since in a normal spring context such a
	 * bean definition would fail.
	-->
	<bean
		id="com.liferay.arkadiko.bean.AKBeanPostProcessor"
		class="com.liferay.arkadiko.bean.AKBeanPostProcessor"
	>

		<!--
		 * serviceRegistry (Required):
		 *
		 * Provide an implementation of
		 * com.liferay.arkadiko.sr.ServiceRegistry into which the spring beans,
		 * matching the rules below, will be published. In turn, from the
		 * service registry will provide services that implement or override
		 * beans that are needed or used in this spring context.
		-->
		<property name="serviceRegistry" ref="serviceRegistry" />

		<!--
		 * excludeBeanNames (Optional):
		 *
		 * Provide a list of bean names that should be excluded. Names may be
		 * prefixed OR suffixed with a * for simple matching.
		-->
		<!--
		<property name="excludeBeanNames">
			<list>
				<value>*Advice</value>
			</list>
		</property>
		-->

		<!--
		 * excludeClassNames (Optional):
		 *
		 * Provide a list of class names that should be excluded. Names may be
		 * prefixed OR suffixed with a * for simple matching.
		-->
		<!--
		<property name="excludeClassNames">
			<list>
				<value>java.lang.*</value>
				<value>java.util.*</value>
			</list>
		</property>
		-->

		<!--
		 * includeBeanNames (Optional):
		 *
		 * Provide a list of bean names that should be included. Names may be
		 * prefixed OR suffixed with a * for simple matching. The default
		 * behavior, if no list is provided, is to include nothing.
		-->
		<!--
		<property name="includeBeanNames">
			<list>
				<value>com.liferay.*</value>
			</list>
		</property>
		-->

		<!--
		 * includeClassNames (Optional):
		 *
		 * Provide a list of class names that should be included. Names may be
		 * prefixed OR suffixed with a * for simple matching. The default
		 * behavior, if no list is provided, is to include nothing.
		-->
		<!--
		<property name="includeClassNames">
			<list>
				<value>com.liferay.*</value>
			</list>
		</property>
		-->

		<!--
		 * order (Optional):
		 *
		 * As a BeanPostProcessor, we may have to play nicely with other
		 * BeanPostProcessors also included in the spring context. Use the
		 * order property to adjust the order in which BeanPostProcessors are
		 * invoked by spring. When BeanPostProcessors don't set an order, the
		 * ordering of invocation is indeterminate which may lead to unexpected
		 * behavior and possibly errors. Therefore setting the specific order is
		 * recommended. The most common case for Arkadiko is to be invoked last.
		 * The default value is 20.
		-->
		<!--
		<property name="order">
			<value type="java.lang.Integer">20</value>
		</property>
		-->
	</bean>

	<!--
	 * com.liferay.arkadiko.sr.ServiceRegistry:
	 *
	 * In order to allow Arkadiko to be used in situations where an osgi
	 * framework already exists, or where it is necessary to prevent the osgi
	 * apis from conflicting with the runtime hosting the spring application, a
	 * ServiceRegistry abstraction provides the functionality necessary to
	 * support Arkadiko's bean to service mapping.
	 *
	 * The com.liferay.arkadiko.osgi.OSGiServiceRegistry implementation takes a
	 * BundleContext constructor argument.
	-->
	<bean id="serviceRegistry" class="com.liferay.arkadiko.osgi.OSGiServiceRegistry">
		<constructor-arg ref="bundleContext" />

		<!--
		 * extraBeanProperties (Optional):
		 *
		 * Provide a Map of properties you want to add to each bean published to
		 * the framework.
		-->
		<!--
		<property name="extraBeanProperties">
			<map>
				<entry key="service.vendor">
					<bean
						class="com.foo.ReleaseInfo"
						factory-method="getVendor"
					/>
				</entry>
				<entry key="service.vendor.buildDate">
					<bean
						class="com.foo.ReleaseInfo"
						factory-method="getBuildDate"
					/>
				</entry>
				<entry key="service.vendor.version">
					<bean
						class="com.foo.ReleaseInfo"
						factory-method="getVersion"
					/>
				</entry>
			</map>
		</property>
		-->

		<!--
		 * strictMatching (Optional):
		 *
		 * If set to true, strict matching should
		 * occur when new services are published into the framework. Strict
		 * matches involve matching all interfaces as well as the bean.id
		 * property. Otherwise, only a single interface (typically the primary
		 * interface under which the service is published) and the bean.id
		 * property must match. Default is false.
		-->
		<!--
		<property name="strictMatching">
			<value>true</value>
		</property>
		-->
	</bean>

	<!--
	 * com.liferay.arkadiko.osgi.OSGiFrameworkFactory:
	 *
	 * This is a simple implementation of a Framework factory class which will
	 * attempt to locate and initialize a Framework instance from the
	 * classpath and return a BundleContext.
	 *
	 * The single parameter of the factory method is a Map<String, String> which
	 * can contain any of the standard OSGi defined Framework properties. In
	 * addition it can contain a few custom properties as defined below.
	-->
	<bean
		id="bundleContext"
		class="com.liferay.arkadiko.osgi.OSGiFrameworkFactory"
		factory-method="init"
	>
		<constructor-arg>
			<map>
				<!--
				 * See the documentation for
				 * org.osgi.framework.launch.Framework to find which properties
				 * are available.
				-->
				<entry key="org.osgi.framework.bundle.parent" value="app" />
				<entry key="org.osgi.framework.startlevel.beginning" value="5" />
				<entry key="org.osgi.framework.storage">
					<value>${project.dir}/data</value>
				</entry>
				<entry key="org.osgi.framework.system.packages.extra">
					<value>com.liferay.arkadiko.test.interfaces,org.apache.commons.logging</value>
				</entry>

				<!--
				 * Set to true if you want to forcefully attempt to start all
				 * the installed bundles.
				-->
				<entry key="bundles.force.start">
					<value>${bundles.force.start}</value>
				</entry>

				<!--
				 * Provide a comma delimited list of bundles to install. These
				 * may include path relative to "project.dir" property.
				-->
				<entry key="bundles.to.install">
					<value>${bundles.to.install}</value>
				</entry>

				<!--
				 * Set the path to the project dir, for location of resources,
				 * including the list of bundles to install.
				-->
				<entry key="project.dir">
					<value>${project.dir}</value>
				</entry>
			</map>
		</constructor-arg>
	</bean>

	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer" />
</beans>